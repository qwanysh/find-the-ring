{"version":3,"sources":["serviceWorker.js","utils.js","components/UI/Button/Button.js","components/ControlPanel/ControlPanel.js","components/ChestContainer/Chest/Chest.js","components/ChestContainer/GameStatusCaption/GameStatusCaption.js","components/ChestContainer/ChestContainer.js","containers/Game/Game.js","components/Menu/Menu.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","GameStatus","IN_PROGRESS","DEFEAT","VICTORY","createChests","amount","index","random","range","map","i","createChest","getChestWithRing","chests","find","chest","hasRing","openChest","chestsCopy","open","isOpen","this","Button","props","className","disabled","onClick","children","ControlPanel","openedChests","maxAttempts","gameStatus","attemptsMade","restartGame","to","Chest","nextProps","nextState","classes","push","join","Component","GameStatusCaption","ChestContainer","gameEndText","chestElements","key","Game","useState","setGameStatus","setChests","filter","length","countOpenedChests","useEffect","AMOUNT","indexOf","Menu","App","basename","path","component","exact","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f55c70e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {random, range} from 'lodash';\n\nexport class GameStatus {\n  static IN_PROGRESS = 'in progress';\n  static DEFEAT = 'defeat';\n  static VICTORY = 'victory';\n}\n\nexport const createChests = amount => {\n  const index = random(0, amount - 1);\n  return range(amount).map(i => createChest(i === index));\n};\n\nexport const countOpenedChests = chests => {\n  return chests.filter(chest => chest.isOpen && !chest.hasRing).length;\n};\n\nexport const getChestWithRing = chests => {\n  return chests.find(chest => chest.hasRing);\n};\n\nexport const openChest = (chests, index) => {\n  const chestsCopy = [...chests];\n  chestsCopy[index] = chestsCopy[index].open();\n  return chestsCopy;\n};\n\nconst createChest = (hasRing = false) => {\n  return {\n    hasRing,\n    isOpen: false,\n    open() {\n      return {...this, isOpen: true};\n    },\n  };\n};","import React from 'react';\nimport './Button.css';\n\nconst Button = props => {\n  return <button\n      className='Button'\n      disabled={props.disabled}\n      onClick={props.onClick}\n  >{props.children}</button>;\n};\n\nexport default Button;","import React from 'react';\nimport './ControlPanel.css';\nimport {GameStatus} from '../../utils';\nimport Button from '../UI/Button/Button';\nimport {Link} from 'react-router-dom';\n\nconst ControlPanel = props => {\n  const DANGER_ATTEMPTS = 5;\n  const {openedChests, maxAttempts, gameStatus} = props;\n  let attemptsMade = maxAttempts - openedChests;\n\n  if (attemptsMade <= DANGER_ATTEMPTS) {\n    attemptsMade = <span className='ControlPanel__text--danger'>{attemptsMade}</span>;\n  }\n\n  return (\n      <div className='ControlPanel'>\n        <p className='ControlPanel__text'>Attempts left: {attemptsMade}/{maxAttempts}</p>\n        <Button\n            disabled={openedChests === 0 && gameStatus === GameStatus.IN_PROGRESS}\n            onClick={props.restartGame}\n        >Restart</Button>\n        <Link to='/'>\n          <Button>Go to Menu</Button>\n        </Link>\n      </div>\n  );\n};\n\nexport default ControlPanel;","import React, {Component} from 'react';\nimport './Chest.css';\n\n\nclass Chest extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.chest.isOpen !== nextProps.chest.isOpen;\n  }\n\n  render() {\n    const {isOpen, hasRing} = this.props.chest;\n    const classes = ['Chest'];\n\n    if (isOpen) {\n      classes.push('Chest--open');\n    }\n    if (isOpen && hasRing) {\n      classes.push('Chest--has-ring');\n    }\n\n    return <div\n        className={classes.join(' ')}\n        onClick={() => this.props.openChest(this.props.index)}\n    />;\n  }\n}\n\nexport default Chest;","import React from 'react';\nimport './GameStatusCaption.css';\n\nconst GameStatusCaption = props => {\n  return (\n      <div className='GameStatusCaption'>\n        <p className='GameStatusCaption__text'>{props.children}</p>\n      </div>\n  );\n};\n\nexport default GameStatusCaption;","import React from 'react';\nimport './ChestContainer.css';\nimport Chest from './Chest/Chest';\nimport {GameStatus} from '../../utils';\nimport GameStatusCaption from './GameStatusCaption/GameStatusCaption';\n\nconst ChestContainer = props => {\n  const chestElements = props.chests.map((chest, index) => (\n      <Chest\n          key={index}\n          chest={chest}\n          index={index}\n          openChest={props.openChest}\n      />\n  ));\n\n  let gameEndText;\n\n  if (props.gameStatus === GameStatus.DEFEAT) {\n    gameEndText = 'You lose!';\n  } else if (props.gameStatus === GameStatus.VICTORY) {\n    gameEndText = 'You found it!';\n  }\n\n  return (\n      <div className='ChestContainer'>\n        {chestElements}\n        {gameEndText ? <GameStatusCaption>{gameEndText}</GameStatusCaption> : null}\n      </div>\n  );\n};\n\nexport default ChestContainer;","import React, {useEffect, useState} from 'react';\nimport {countOpenedChests, createChests, GameStatus, getChestWithRing, openChest} from '../../utils';\nimport ControlPanel from '../../components/ControlPanel/ControlPanel';\nimport ChestContainer from '../../components/ChestContainer/ChestContainer';\n\n\nconst Game = () => {\n  const AMOUNT = 36;\n  const MAX_ATTEMPTS = AMOUNT / 2;\n  const [gameStatus, setGameStatus] = useState(GameStatus.IN_PROGRESS);\n  const [chests, setChests] = useState(createChests(AMOUNT));\n  const openedChests = countOpenedChests(chests);\n\n  const openChestHandler = index => {\n    if (gameStatus === GameStatus.IN_PROGRESS && !chests[index].isOpen) {\n      setChests(openChest(chests, index));\n    }\n  };\n\n  const restartGameHandler = () => {\n    setGameStatus(GameStatus.IN_PROGRESS);\n    setChests(createChests(AMOUNT));\n  };\n\n  const checkIsGameEnded = () => {\n    if (getChestWithRing(chests).isOpen && gameStatus !== GameStatus.DEFEAT) {\n      setGameStatus(GameStatus.VICTORY);\n    } else if (openedChests === MAX_ATTEMPTS) {\n      setGameStatus(GameStatus.DEFEAT);\n    }\n  };\n\n  const showChestWithRing = () => {\n    if (gameStatus === GameStatus.DEFEAT && !getChestWithRing(chests).isOpen) {\n      const index = chests.indexOf(getChestWithRing(chests));\n      setChests(openChest(chests, index));\n    }\n  };\n\n  useEffect(checkIsGameEnded);\n  useEffect(showChestWithRing, [gameStatus]);\n\n  return (\n      <>\n        <ChestContainer\n            chests={chests}\n            gameStatus={gameStatus}\n            openChest={openChestHandler}\n        />\n        <ControlPanel\n            openedChests={openedChests}\n            gameStatus={gameStatus}\n            maxAttempts={MAX_ATTEMPTS}\n            restartGame={restartGameHandler}\n        />\n      </>\n  );\n}\n\nexport default Game;","import React from 'react';\nimport Button from '../UI/Button/Button';\nimport {Link} from 'react-router-dom';\nimport './Menu.css';\n\nconst Menu = () => {\n  return (\n      <>\n        <div className='Menu__ring'/>\n        <Link to='/game'>\n          <Button>Start Game</Button>\n        </Link>\n      </>\n  );\n};\n\nexport default Menu;","import React from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Redirect, Route, Switch} from 'react-router';\nimport Game from './Game/Game';\nimport Menu from '../components/Menu/Menu';\nimport './App.css';\n\nconst App = () => {\n  return (\n      <div className='App'>\n        <div className='App__container'>\n          <h1 className='App__heading'>Find the ring</h1>\n          <BrowserRouter basename='/find-the-ring/'>\n            <Switch>\n              <Route path='/game' component={Game}/>\n              <Route path='/' exact component={Menu}/>\n              <Route path='/' render={() => (\n                  <Redirect to='/'/>\n              )}/>\n            </Switch>\n          </BrowserRouter>\n        </div>\n      </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}