{"version":3,"sources":["utils.js","components/Chest/Chest.js","components/GameStatusCaption/GameStatusCaption.js","components/ChestContainer/ChestContainer.js","components/ControlPanel/ControlPanel.js","components/App/App.js","serviceWorker.js","index.js"],"names":["GameStatus","IN_PROGRESS","DEFEAT","VICTORY","getChests","amount","chests","index","random","i","push","getChest","hasRing","isOpen","Chest","props","chest","classes","className","join","onClick","openChestHandler","GameStatusCaption","children","ChestContainer","chestElements","map","key","gameEndText","gameStatus","ControlPanel","openedChests","maxAttempts","attemptsMade","disabled","restartGameHandler","App","useState","setGameStatus","setChests","filter","length","countOpenedChests","checkIsGameEnded","AMOUNT","chestsCopy","targetChest","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e08077d5.chunk.js","sourcesContent":["import {random} from 'lodash';\n\nexport class GameStatus {\n  static IN_PROGRESS = 'in progress';\n  static DEFEAT = 'defeat';\n  static VICTORY = 'victory';\n}\n\nexport const getChests = amount => {\n  const chests = [];\n  const index = random(0, amount);\n\n  for (let i = 0; i < amount; i++) {\n    chests.push(getChest(i === index));\n  }\n\n  return chests;\n};\n\nexport const countOpenedChests = chests => {\n  return chests.filter(chest => chest.isOpen).length;\n};\n\nconst getChest = (hasRing = false) => {\n  return {hasRing, isOpen: false};\n};","import React from 'react';\nimport './Chest.css';\n\nconst Chest = props => {\n  const {isOpen, hasRing} = props.chest;\n  const classes = ['Chest'];\n  if (isOpen) {\n    classes.push('Chest--open');\n  }\n  if (isOpen && hasRing) {\n    classes.push('Chest--has-ring');\n  }\n  return <div className={classes.join(' ')} onClick={() => props.openChestHandler(props.index)}/>\n};\n\n\nexport default Chest;","import React from 'react';\nimport './GameStatusCaption.css';\n\nconst GameStatusCaption = props => {\n  return (\n      <div className='GameStatusCaption'>\n        <p className='GameStatusCaption__text'>{props.children}</p>\n      </div>\n  );\n};\n\nexport default GameStatusCaption;","import React from 'react';\nimport './ChestContainer.css';\nimport Chest from '../Chest/Chest';\nimport {GameStatus} from '../../utils';\nimport GameStatusCaption from '../GameStatusCaption/GameStatusCaption';\n\nconst ChestContainer = props => {\n  const chestElements = props.chests.map((chest, index) => {\n    return <Chest key={index} chest={chest} index={index} openChestHandler={props.openChestHandler}/>;\n  });\n\n  let gameEndText = null;\n\n  if (props.gameStatus === GameStatus.DEFEAT) {\n    gameEndText = 'You lose!';\n  } else if (props.gameStatus === GameStatus.VICTORY) {\n    gameEndText = 'You found it!';\n  }\n\n  return (\n      <div className='ChestContainer'>\n        {chestElements}\n        {gameEndText ? <GameStatusCaption>{gameEndText}</GameStatusCaption> : null}\n      </div>\n  );\n};\n\nexport default ChestContainer;","import React from 'react';\nimport './ControlPanel.css';\n\nconst ControlPanel = props => {\n  const {openedChests, maxAttempts} = props;\n  const attemptsMade = maxAttempts - openedChests;\n\n  return (\n      <div className='ControlPanel'>\n        <p className='ControlPanel__text'>Attempts left: {attemptsMade}/{maxAttempts}</p>\n        <button\n            className='ControlPanel__button'\n            disabled={openedChests === 0}\n            onClick={props.restartGameHandler}\n        >Restart</button>\n      </div>\n  );\n};\n\nexport default ControlPanel;","import React, {useState} from 'react';\nimport './App.css';\nimport {countOpenedChests, GameStatus, getChests} from '../../utils';\nimport ChestContainer from '../ChestContainer/ChestContainer';\nimport ControlPanel from '../ControlPanel/ControlPanel';\n\nconst App = () => {\n  const AMOUNT = 36;\n  const MAX_ATTEMPTS = AMOUNT / 2;\n  const [gameStatus, setGameStatus] = useState(GameStatus.IN_PROGRESS);\n  const [chests, setChests] = useState(getChests(AMOUNT));\n  const openedChests = countOpenedChests(chests);\n\n  const openChest = index => {\n    if (gameStatus !== GameStatus.IN_PROGRESS || chests[index].isOpen) return;\n\n    const chestsCopy = [...chests];\n    const targetChest = chestsCopy[index];\n    targetChest.isOpen = true;\n    setChests(chestsCopy);\n\n    checkIsGameEnded(targetChest);\n  };\n\n  const checkIsGameEnded = chest => {\n    if (chest.hasRing && gameStatus !== GameStatus.DEFEAT) {\n      setGameStatus(GameStatus.VICTORY);\n    } else if (openedChests + 1 === MAX_ATTEMPTS) {\n      setGameStatus(GameStatus.DEFEAT);\n    }\n  }\n\n  const restartGame = () => {\n    setGameStatus(GameStatus.IN_PROGRESS);\n    setChests(getChests(AMOUNT));\n  };\n\n  return (\n      <div className='App'>\n        <div className='App__container'>\n          <h1 className='App__heading'>Find the ring</h1>\n          <ChestContainer\n              chests={chests}\n              openChestHandler={openChest}\n              gameStatus={gameStatus}\n          />\n          <ControlPanel\n              openedChests={openedChests}\n              maxAttempts={MAX_ATTEMPTS}\n              restartGameHandler={restartGame}\n          />\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}